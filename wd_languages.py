#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sat Dec  9 16:00:38 2017 by generateDS.py version 2.29.0.
# Python 2.7.13 (default, Dec 18 2016, 05:36:03)  [GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.38)]
#
# Command line options:
#   ('-a', 'wd:')
#   ('-o', 'wd_languages.py')
#
# Command line arguments:
#   wd_languages.xsd
#
# Command line:
#   ./generateDS-new.py -a "wd:" -o "wd_languages.py" wd_languages.xsd
#
# Current working directory (os.getcwd()):
#   wd_translations
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class Instance_IDType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, wd_parent_id=None, wd_parent_type=None, wd_type=None, valueOf_=None):
        self.original_tagname_ = None
        self.wd_parent_id = _cast(None, wd_parent_id)
        self.wd_parent_type = _cast(None, wd_parent_type)
        self.wd_type = _cast(None, wd_type)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Instance_IDType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Instance_IDType.subclass:
            return Instance_IDType.subclass(*args_, **kwargs_)
        else:
            return Instance_IDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_wd_parent_id(self): return self.wd_parent_id
    def set_wd_parent_id(self, wd_parent_id): self.wd_parent_id = wd_parent_id
    def get_wd_parent_type(self): return self.wd_parent_type
    def set_wd_parent_type(self, wd_parent_type): self.wd_parent_type = wd_parent_type
    def get_wd_type(self): return self.wd_type
    def set_wd_type(self, wd_type): self.wd_type = wd_type
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='wd:', name_='Instance_IDType', namespacedef_='xmlns:wd="urn:com.workday/bsvc"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Instance_IDType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Instance_IDType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='wd:', name_='Instance_IDType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='wd:', name_='Instance_IDType'):
        if self.wd_parent_id is not None and 'wd_parent_id' not in already_processed:
            already_processed.add('wd_parent_id')
            outfile.write(' wd:parent_id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wd_parent_id), input_name='wd:parent_id')), ))
        if self.wd_parent_type is not None and 'wd_parent_type' not in already_processed:
            already_processed.add('wd_parent_type')
            outfile.write(' wd:parent_type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wd_parent_type), input_name='wd:parent_type')), ))
        if self.wd_type is not None and 'wd_type' not in already_processed:
            already_processed.add('wd_type')
            outfile.write(' wd:type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.wd_type), input_name='wd:type')), ))
    def exportChildren(self, outfile, level, namespace_='wd:', name_='Instance_IDType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('wd:parent_id', node)
        if value is not None and 'wd:parent_id' not in already_processed:
            already_processed.add('wd:parent_id')
            self.wd_parent_id = value
        value = find_attr_value_('wd:parent_type', node)
        if value is not None and 'wd:parent_type' not in already_processed:
            already_processed.add('wd:parent_type')
            self.wd_parent_type = value
        value = find_attr_value_('wd:type', node)
        if value is not None and 'wd:type' not in already_processed:
            already_processed.add('wd:type')
            self.wd_type = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Instance_IDType


class InstanceObjectType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Descriptor=None, ID=None):
        self.original_tagname_ = None
        self.Descriptor = _cast(None, Descriptor)
        if ID is None:
            self.ID = []
        else:
            self.ID = ID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InstanceObjectType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InstanceObjectType.subclass:
            return InstanceObjectType.subclass(*args_, **kwargs_)
        else:
            return InstanceObjectType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def add_ID(self, value): self.ID.append(value)
    def insert_ID_at(self, index, value): self.ID.insert(index, value)
    def replace_ID_at(self, index, value): self.ID[index] = value
    def get_Descriptor(self): return self.Descriptor
    def set_Descriptor(self, Descriptor): self.Descriptor = Descriptor
    def hasContent_(self):
        if (
            self.ID
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='wd:', name_='InstanceObjectType', namespacedef_='xmlns:wd="urn:com.workday/bsvc"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InstanceObjectType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InstanceObjectType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='wd:', name_='InstanceObjectType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='wd:', name_='InstanceObjectType'):
        if self.Descriptor is not None and 'Descriptor' not in already_processed:
            already_processed.add('Descriptor')
            outfile.write(' Descriptor=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Descriptor), input_name='Descriptor')), ))
    def exportChildren(self, outfile, level, namespace_='wd:', name_='InstanceObjectType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ID_ in self.ID:
            ID_.export(outfile, level, namespace_, name_='ID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Descriptor', node)
        if value is not None and 'Descriptor' not in already_processed:
            already_processed.add('Descriptor')
            self.Descriptor = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ID':
            obj_ = Instance_IDType.factory()
            obj_.build(child_)
            self.ID.append(obj_)
            obj_.original_tagname_ = 'ID'
# end class InstanceObjectType


class rootType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Translatable_Tenant_Data_Data=None):
        self.original_tagname_ = None
        if Translatable_Tenant_Data_Data is None:
            self.Translatable_Tenant_Data_Data = []
        else:
            self.Translatable_Tenant_Data_Data = Translatable_Tenant_Data_Data
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, rootType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if rootType.subclass:
            return rootType.subclass(*args_, **kwargs_)
        else:
            return rootType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Translatable_Tenant_Data_Data(self): return self.Translatable_Tenant_Data_Data
    def set_Translatable_Tenant_Data_Data(self, Translatable_Tenant_Data_Data): self.Translatable_Tenant_Data_Data = Translatable_Tenant_Data_Data
    def add_Translatable_Tenant_Data_Data(self, value): self.Translatable_Tenant_Data_Data.append(value)
    def insert_Translatable_Tenant_Data_Data_at(self, index, value): self.Translatable_Tenant_Data_Data.insert(index, value)
    def replace_Translatable_Tenant_Data_Data_at(self, index, value): self.Translatable_Tenant_Data_Data[index] = value
    def hasContent_(self):
        if (
            self.Translatable_Tenant_Data_Data
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='wd:', name_='rootType', namespacedef_='xmlns:wd="urn:com.workday/bsvc"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('rootType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='rootType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='wd:', name_='rootType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='wd:', name_='rootType'):
        pass
    def exportChildren(self, outfile, level, namespace_='wd:', name_='rootType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Translatable_Tenant_Data_Data_ in self.Translatable_Tenant_Data_Data:
            Translatable_Tenant_Data_Data_.export(outfile, level, namespace_, name_='Translatable_Tenant_Data_Data', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Translatable_Tenant_Data_Data':
            obj_ = Translatable_Class_Attribute_DataType.factory()
            obj_.build(child_)
            self.Translatable_Tenant_Data_Data.append(obj_)
            obj_.original_tagname_ = 'Translatable_Tenant_Data_Data'
# end class rootType


class rootTypeAPI(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Put_Translatable_Tenant_Data_Request=None):
        self.original_tagname_ = None
        if Put_Translatable_Tenant_Data_Request is None:
            self.Put_Translatable_Tenant_Data_Request = []
        else:
            self.Put_Translatable_Tenant_Data_Request = Put_Translatable_Tenant_Data_Request
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, rootTypeAPI)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if rootTypeAPI.subclass:
            return rootTypeAPI.subclass(*args_, **kwargs_)
        else:
            return rootTypeAPI(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Put_Translatable_Tenant_Data_Request(self): return self.Put_Translatable_Tenant_Data_Request
    def set_Put_Translatable_Tenant_Data_Request(self, Put_Translatable_Tenant_Data_Request): self.Put_Translatable_Tenant_Data_Request = Put_Translatable_Tenant_Data_Request
    def add_Put_Translatable_Tenant_Data_Request(self, value): self.Put_Translatable_Tenant_Data_Request.append(value)
    def insert_Put_Translatable_Tenant_Data_Request_at(self, index, value): self.Put_Translatable_Tenant_Data_Request.insert(index, value)
    def replace_Put_Translatable_Tenant_Data_Request_at(self, index, value): self.Put_Translatable_Tenant_Data_Request[index] = value
    def hasContent_(self):
        if (
            self.Put_Translatable_Tenant_Data_Request
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='wd:', name_='rootTypeAPI', namespacedef_='xmlns:wd="urn:com.workday/bsvc"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('rootTypeAPI')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='rootTypeAPI')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='wd:', name_='rootTypeAPI', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='wd:', name_='rootTypeAPI'):
        pass
    def exportChildren(self, outfile, level, namespace_='wd:', name_='rootTypeAPI', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Put_Translatable_Tenant_Data_Request_ in self.Put_Translatable_Tenant_Data_Request:
            Put_Translatable_Tenant_Data_Request_.export(outfile, level, namespace_, name_='Put_Translatable_Tenant_Data_Request', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Put_Translatable_Tenant_Data_Request':
            obj_ = Put_Translatable_Tenant_Data_RequestType.factory()
            obj_.build(child_)
            self.Put_Translatable_Tenant_Data_Request.append(obj_)
            obj_.original_tagname_ = 'Put_Translatable_Tenant_Data_Request'
# end class rootTypeAPI


class Translatable_Class_Attribute_DataType(GeneratedsSuper):
    """Parameters that specify the context of the translatation tasks."""
    subclass = None
    superclass = None
    def __init__(self, User_Language_Reference=None, Class_Name=None, Attribute_Reference=None, Translated_Value_for_Instance_Data=None):
        self.original_tagname_ = None
        self.User_Language_Reference = User_Language_Reference
        self.Class_Name = Class_Name
        self.Attribute_Reference = Attribute_Reference
        if Translated_Value_for_Instance_Data is None:
            self.Translated_Value_for_Instance_Data = []
        else:
            self.Translated_Value_for_Instance_Data = Translated_Value_for_Instance_Data
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Translatable_Class_Attribute_DataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Translatable_Class_Attribute_DataType.subclass:
            return Translatable_Class_Attribute_DataType.subclass(*args_, **kwargs_)
        else:
            return Translatable_Class_Attribute_DataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_User_Language_Reference(self): return self.User_Language_Reference
    def set_User_Language_Reference(self, User_Language_Reference): self.User_Language_Reference = User_Language_Reference
    def get_Class_Name(self): return self.Class_Name
    def set_Class_Name(self, Class_Name): self.Class_Name = Class_Name
    def get_Attribute_Reference(self): return self.Attribute_Reference
    def set_Attribute_Reference(self, Attribute_Reference): self.Attribute_Reference = Attribute_Reference
    def get_Translated_Value_for_Instance_Data(self): return self.Translated_Value_for_Instance_Data
    def set_Translated_Value_for_Instance_Data(self, Translated_Value_for_Instance_Data): self.Translated_Value_for_Instance_Data = Translated_Value_for_Instance_Data
    def add_Translated_Value_for_Instance_Data(self, value): self.Translated_Value_for_Instance_Data.append(value)
    def insert_Translated_Value_for_Instance_Data_at(self, index, value): self.Translated_Value_for_Instance_Data.insert(index, value)
    def replace_Translated_Value_for_Instance_Data_at(self, index, value): self.Translated_Value_for_Instance_Data[index] = value
    def hasContent_(self):
        if (
            self.User_Language_Reference is not None or
            self.Class_Name is not None or
            self.Attribute_Reference is not None or
            self.Translated_Value_for_Instance_Data
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='wd:', name_='Translatable_Class_Attribute_DataType', namespacedef_='xmlns:wd="urn:com.workday/bsvc"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Translatable_Class_Attribute_DataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Translatable_Class_Attribute_DataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='wd:', name_='Translatable_Class_Attribute_DataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='wd:', name_='Translatable_Class_Attribute_DataType'):
        pass
    def exportChildren(self, outfile, level, namespace_='wd:', name_='Translatable_Class_Attribute_DataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.User_Language_Reference is not None:
            self.User_Language_Reference.export(outfile, level, namespace_, name_='User_Language_Reference', pretty_print=pretty_print)
        if self.Class_Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<wd:Class_Name>%s</wd:Class_Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Class_Name), input_name='Class_Name')), eol_))
        if self.Attribute_Reference is not None:
            self.Attribute_Reference.export(outfile, level, namespace_, name_='Attribute_Reference', pretty_print=pretty_print)
        for Translated_Value_for_Instance_Data_ in self.Translated_Value_for_Instance_Data:
            Translated_Value_for_Instance_Data_.export(outfile, level, namespace_, name_='Translated_Value_for_Instance_Data', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'User_Language_Reference':
            obj_ = User_LanguageObjectType.factory()
            obj_.build(child_)
            self.User_Language_Reference = obj_
            obj_.original_tagname_ = 'User_Language_Reference'
        elif nodeName_ == 'Class_Name':
            Class_Name_ = child_.text
            Class_Name_ = self.gds_validate_string(Class_Name_, node, 'Class_Name')
            self.Class_Name = Class_Name_
        elif nodeName_ == 'Attribute_Reference':
            obj_ = Attribute_ReferenceType.factory()
            obj_.build(child_)
            self.Attribute_Reference = obj_
            obj_.original_tagname_ = 'Attribute_Reference'
        elif nodeName_ == 'Translated_Value_for_Instance_Data':
            obj_ = Translated_Value_for_Instance_DataType.factory()
            obj_.build(child_)
            self.Translated_Value_for_Instance_Data.append(obj_)
            obj_.original_tagname_ = 'Translated_Value_for_Instance_Data'
# end class Translatable_Class_Attribute_DataType


class Translated_Value_for_Instance_DataType(GeneratedsSuper):
    """Translatable data in base language and target languages."""
    subclass = None
    superclass = None
    def __init__(self, Instance_Reference=None, Base_Value=None, Translated_Value=None, Rich_Base_Value=None, Translated_Rich_Value=None):
        self.original_tagname_ = None
        self.Instance_Reference = Instance_Reference
        self.Base_Value = Base_Value
        self.Translated_Value = Translated_Value
        self.Rich_Base_Value = Rich_Base_Value
        self.validate_RichText(self.Rich_Base_Value)
        self.Translated_Rich_Value = Translated_Rich_Value
        self.validate_RichText(self.Translated_Rich_Value)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Translated_Value_for_Instance_DataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Translated_Value_for_Instance_DataType.subclass:
            return Translated_Value_for_Instance_DataType.subclass(*args_, **kwargs_)
        else:
            return Translated_Value_for_Instance_DataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Instance_Reference(self): return self.Instance_Reference
    def set_Instance_Reference(self, Instance_Reference): self.Instance_Reference = Instance_Reference
    def get_Base_Value(self): return self.Base_Value
    def set_Base_Value(self, Base_Value): self.Base_Value = Base_Value
    def get_Translated_Value(self): return self.Translated_Value
    def set_Translated_Value(self, Translated_Value): self.Translated_Value = Translated_Value
    def get_Rich_Base_Value(self): return self.Rich_Base_Value
    def set_Rich_Base_Value(self, Rich_Base_Value): self.Rich_Base_Value = Rich_Base_Value
    def get_Translated_Rich_Value(self): return self.Translated_Rich_Value
    def set_Translated_Rich_Value(self, Translated_Rich_Value): self.Translated_Rich_Value = Translated_Rich_Value
    def validate_RichText(self, value):
        # Validate type RichText, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.Instance_Reference is not None or
            self.Base_Value is not None or
            self.Translated_Value is not None or
            self.Rich_Base_Value is not None or
            self.Translated_Rich_Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='wd:', name_='Translated_Value_for_Instance_DataType', namespacedef_='xmlns:wd="urn:com.workday/bsvc"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Translated_Value_for_Instance_DataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Translated_Value_for_Instance_DataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='wd:', name_='Translated_Value_for_Instance_DataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='wd:', name_='Translated_Value_for_Instance_DataType'):
        pass
    def exportChildren(self, outfile, level, namespace_='wd:', name_='Translated_Value_for_Instance_DataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Instance_Reference is not None:
            self.Instance_Reference.export(outfile, level, namespace_, name_='Instance_Reference', pretty_print=pretty_print)
        if self.Base_Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<wd:Base_Value>%s</wd:Base_Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Base_Value), input_name='Base_Value')), eol_))
        if self.Translated_Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<wd:Translated_Value>%s</wd:Translated_Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Translated_Value), input_name='Translated_Value')), eol_))
        if self.Rich_Base_Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<wd:Rich_Base_Value>%s</wd:Rich_Base_Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Rich_Base_Value), input_name='Rich_Base_Value')), eol_))
        if self.Translated_Rich_Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<wd:Translated_Rich_Value>%s</wd:Translated_Rich_Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Translated_Rich_Value), input_name='Translated_Rich_Value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Instance_Reference':
            obj_ = InstanceObjectType.factory()
            obj_.build(child_)
            self.Instance_Reference = obj_
            obj_.original_tagname_ = 'Instance_Reference'
        elif nodeName_ == 'Base_Value':
            Base_Value_ = child_.text
            Base_Value_ = self.gds_validate_string(Base_Value_, node, 'Base_Value')
            self.Base_Value = Base_Value_
        elif nodeName_ == 'Translated_Value':
            Translated_Value_ = child_.text
            Translated_Value_ = self.gds_validate_string(Translated_Value_, node, 'Translated_Value')
            self.Translated_Value = Translated_Value_
        elif nodeName_ == 'Rich_Base_Value':
            Rich_Base_Value_ = child_.text
            Rich_Base_Value_ = self.gds_validate_string(Rich_Base_Value_, node, 'Rich_Base_Value')
            self.Rich_Base_Value = Rich_Base_Value_
            # validate type RichText
            self.validate_RichText(self.Rich_Base_Value)
        elif nodeName_ == 'Translated_Rich_Value':
            Translated_Rich_Value_ = child_.text
            Translated_Rich_Value_ = self.gds_validate_string(Translated_Rich_Value_, node, 'Translated_Rich_Value')
            self.Translated_Rich_Value = Translated_Rich_Value_
            # validate type RichText
            self.validate_RichText(self.Translated_Rich_Value)
# end class Translated_Value_for_Instance_DataType


class Attribute_ReferenceType(GeneratedsSuper):
    """Attribute information of the object."""
    subclass = None
    superclass = None
    def __init__(self, Name=None, Namespace_URI=None):
        self.original_tagname_ = None
        self.Name = Name
        self.Namespace_URI = Namespace_URI
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Attribute_ReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Attribute_ReferenceType.subclass:
            return Attribute_ReferenceType.subclass(*args_, **kwargs_)
        else:
            return Attribute_ReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Namespace_URI(self): return self.Namespace_URI
    def set_Namespace_URI(self, Namespace_URI): self.Namespace_URI = Namespace_URI
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Namespace_URI is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='wd:', name_='Attribute_ReferenceType', namespacedef_='xmlns:wd="urn:com.workday/bsvc"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Attribute_ReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Attribute_ReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='wd:', name_='Attribute_ReferenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='wd:', name_='Attribute_ReferenceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='wd:', name_='Attribute_ReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<wd:Name>%s</wd:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.Namespace_URI is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<wd:Namespace_URI>%s</wd:Namespace_URI>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Namespace_URI), input_name='Namespace_URI')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Namespace_URI':
            Namespace_URI_ = child_.text
            Namespace_URI_ = self.gds_validate_string(Namespace_URI_, node, 'Namespace_URI')
            self.Namespace_URI = Namespace_URI_
# end class Attribute_ReferenceType


class Put_Translatable_Tenant_Data_RequestType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Translatable_Tenant_Data_Data=None):
        self.original_tagname_ = None
        if Translatable_Tenant_Data_Data is None:
            self.Translatable_Tenant_Data_Data = []
        else:
            self.Translatable_Tenant_Data_Data = Translatable_Tenant_Data_Data
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Put_Translatable_Tenant_Data_RequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Put_Translatable_Tenant_Data_RequestType.subclass:
            return Put_Translatable_Tenant_Data_RequestType.subclass(*args_, **kwargs_)
        else:
            return Put_Translatable_Tenant_Data_RequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Translatable_Tenant_Data_Data(self): return self.Translatable_Tenant_Data_Data
    def set_Translatable_Tenant_Data_Data(self, Translatable_Tenant_Data_Data): self.Translatable_Tenant_Data_Data = Translatable_Tenant_Data_Data
    def add_Translatable_Tenant_Data_Data(self, value): self.Translatable_Tenant_Data_Data.append(value)
    def insert_Translatable_Tenant_Data_Data_at(self, index, value): self.Translatable_Tenant_Data_Data.insert(index, value)
    def replace_Translatable_Tenant_Data_Data_at(self, index, value): self.Translatable_Tenant_Data_Data[index] = value
    def hasContent_(self):
        if (
            self.Translatable_Tenant_Data_Data
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='wd:', name_='Put_Translatable_Tenant_Data_RequestType', namespacedef_='xmlns:wd="urn:com.workday/bsvc"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Put_Translatable_Tenant_Data_RequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Put_Translatable_Tenant_Data_RequestType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='wd:', name_='Put_Translatable_Tenant_Data_RequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='wd:', name_='Put_Translatable_Tenant_Data_RequestType'):
        pass
    def exportChildren(self, outfile, level, namespace_='wd:', name_='Put_Translatable_Tenant_Data_RequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Translatable_Tenant_Data_Data_ in self.Translatable_Tenant_Data_Data:
            Translatable_Tenant_Data_Data_.export(outfile, level, namespace_, name_='Translatable_Tenant_Data_Data', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Translatable_Tenant_Data_Data':
            obj_ = Translatable_Class_Attribute_DataType.factory()
            obj_.build(child_)
            self.Translatable_Tenant_Data_Data.append(obj_)
            obj_.original_tagname_ = 'Translatable_Tenant_Data_Data'
# end class Put_Translatable_Tenant_Data_RequestType


class User_LanguageObjectType(GeneratedsSuper):
    """Display information used to describe an instance of an object. This
    'optional' information is for outbound descriptive purposes only
    and is not processed on inbound Workday Web Services requests."""
    subclass = None
    superclass = None
    def __init__(self, Descriptor=None, ID=None):
        self.original_tagname_ = None
        self.Descriptor = _cast(None, Descriptor)
        if ID is None:
            self.ID = []
        else:
            self.ID = ID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, User_LanguageObjectType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if User_LanguageObjectType.subclass:
            return User_LanguageObjectType.subclass(*args_, **kwargs_)
        else:
            return User_LanguageObjectType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def add_ID(self, value): self.ID.append(value)
    def insert_ID_at(self, index, value): self.ID.insert(index, value)
    def replace_ID_at(self, index, value): self.ID[index] = value
    def get_Descriptor(self): return self.Descriptor
    def set_Descriptor(self, Descriptor): self.Descriptor = Descriptor
    def hasContent_(self):
        if (
            self.ID
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='wd:', name_='User_LanguageObjectType', namespacedef_='xmlns:wd="urn:com.workday/bsvc"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('User_LanguageObjectType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='User_LanguageObjectType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='wd:', name_='User_LanguageObjectType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='wd:', name_='User_LanguageObjectType'):
        if self.Descriptor is not None and 'Descriptor' not in already_processed:
            already_processed.add('Descriptor')
            outfile.write(' Descriptor=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Descriptor), input_name='Descriptor')), ))
    def exportChildren(self, outfile, level, namespace_='wd:', name_='User_LanguageObjectType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ID_ in self.ID:
            ID_.export(outfile, level, namespace_, name_='ID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Descriptor', node)
        if value is not None and 'Descriptor' not in already_processed:
            already_processed.add('Descriptor')
            self.Descriptor = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ID':
            obj_ = User_LanguageObjectIDType.factory()
            obj_.build(child_)
            self.ID.append(obj_)
            obj_.original_tagname_ = 'ID'
# end class User_LanguageObjectType


class User_LanguageObjectIDType(GeneratedsSuper):
    """Contains a unique identifier for an instance of an object.The unique
    identifier type. Each "ID" for an instance of an object contains
    a type and a value. A single instance of an object can have
    multiple "ID" but only a single "ID" per "type"."""
    subclass = None
    superclass = None
    def __init__(self, wd_type=None, valueOf_=None):
        self.original_tagname_ = None
        self.wd_type = _cast(None, wd_type)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, User_LanguageObjectIDType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if User_LanguageObjectIDType.subclass:
            return User_LanguageObjectIDType.subclass(*args_, **kwargs_)
        else:
            return User_LanguageObjectIDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_wd_type(self): return self.wd_type
    def set_wd_type(self, wd_type): self.wd_type = wd_type
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='wd:', name_='User_LanguageObjectIDType', namespacedef_='xmlns:wd="urn:com.workday/bsvc"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('User_LanguageObjectIDType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='User_LanguageObjectIDType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='wd:', name_='User_LanguageObjectIDType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='wd:', name_='User_LanguageObjectIDType'):
        if self.wd_type is not None and 'wd_type' not in already_processed:
            already_processed.add('wd_type')
            outfile.write(' wd:type=%s' % (quote_attrib(self.wd_type), ))
    def exportChildren(self, outfile, level, namespace_='wd:', name_='User_LanguageObjectIDType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('wd:type', node)
        if value is not None and 'wd:type' not in already_processed:
            already_processed.add('wd:type')
            self.wd_type = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class User_LanguageObjectIDType


GDSClassesMapping = {
    'root': rootType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'rootType'
        rootClass = rootType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:wd="urn:com.workday/bsvc"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'rootType'
        rootClass = rootType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    if sys.version_info.major == 2:
        from StringIO import StringIO as IOBuffer
    else:
        from io import BytesIO as IOBuffer
    parser = None
    doc = parsexml_(IOBuffer(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'rootType'
        rootClass = rootType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:wd="urn:com.workday/bsvc"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'rootType'
        rootClass = rootType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from wd_languages import *\n\n')
        sys.stdout.write('import wd_languages as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "Attribute_ReferenceType",
    "InstanceObjectType",
    "Instance_IDType",
    "Put_Translatable_Tenant_Data_RequestType",
    "Translatable_Class_Attribute_DataType",
    "Translated_Value_for_Instance_DataType",
    "User_LanguageObjectIDType",
    "User_LanguageObjectType",
    "rootType",
    "rootTypeAPI"
]
